<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>RHAC Values Matching Game</title>
<style>
body {
  display: flex;
  flex-direction: column;
  align-items: center;
  height: 100vh;
  margin: 0;
  padding: 20px;
  font-family: Arial, sans-serif;
  color: black;

  /* Background image */
  background: url("830E4F9D-82B7-47C8-9E6B-3D24FA7DA741.jpeg") no-repeat center center fixed;
  background-size: cover;
}

#message {
  font-size: 20px;
  margin-bottom: 20px;
  min-height: 50px;
  text-align: center;
  color: black;
  background: rgba(255,255,255,0.9);
  padding: 10px 15px;
  border-radius: 8px;
  transition: transform 0.3s ease, opacity 0.3s ease;
}
.pop {
  transform: scale(1.3);
  opacity: 1;
}

#game {
  display: grid;
  grid-template-columns: repeat(4, 100px);
  grid-gap: 15px;
}

.card {
  width: 100px;
  height: 100px;
  background: white;
  border-radius: 12px;
  display: flex;
  justify-content: center;
  align-items: center;
  cursor: pointer;
  font-size: 28px;
  color: black;
  text-align: center;
  padding: 5px;
  transition: background 0.3s, transform 0.3s;
}
.card.selected {
  background: #ccc;
}
.card.matched {
  background: #2ecc71;
  color: white;
  pointer-events: none;
  transform: scale(0);
  transition: transform 0.5s ease;
}

#win {
  position: fixed;
  top: 0; left: 0;
  width: 100%; height: 100%;
  background: rgba(255,255,255,0.95);
  color: black;
  font-size: 24px;
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;
  opacity: 0;
  pointer-events: none;
  transition: opacity 0.8s;
  text-align: center;
  padding: 20px;
}
#win.show {
  opacity: 1;
  pointer-events: all;
}
</style>
</head>
<body>

<div id="message">Match each word with its emoji!</div>
<div id="game"></div>

<!-- Final screen -->
<div id="win">
  <p>🎉 Great job! You matched all RHAC values!</p>
</div>

<audio id="popSound" src="sound1.mp3"></audio>
<audio id="finalSound" src="sound2.mp3"></audio>

<script>
const game = document.getElementById("game");
const win = document.getElementById("win");
const message = document.getElementById("message");

const popSound = document.getElementById("popSound");
const finalSound = document.getElementById("finalSound");

// Word–emoji pairs
const pairs = {
  "Respect": "🤝",
  "Integrity": "🕊️",
  "Humility": "🌱",
  "Kindness": "💖",
  "Compassion": "🫂",
  "Resilience": "💪",
  "Perseverance": "🏃‍♂️"
};

// Build cards (each word + its emoji)
let cardsArray = [];
for (const [word, emoji] of Object.entries(pairs)) {
  cardsArray.push({symbol: word, type: "word"});
  cardsArray.push({symbol: emoji, type: "emoji"});
}
cardsArray.sort(() => Math.random() - 0.5);

let selected = [];
let matchedCount = 0;

// Create grid
cardsArray.forEach(item => {
  const card = document.createElement("div");
  card.classList.add("card");
  card.textContent = item.symbol;
  card.dataset.symbol = item.symbol;
  card.dataset.type = item.type;
  card.addEventListener("click", () => selectCard(card));
  game.appendChild(card);
});

function selectCard(card){
  if(card.classList.contains("matched") || card.classList.contains("selected")) return;

  card.classList.add("selected");
  selected.push(card);

  if(selected.length === 2){
    const [c1, c2] = selected;

    // Play pop sound
    popSound.currentTime = 0;
    popSound.play().catch(()=>{});

    if(isMatch(c1, c2)){
      c1.classList.remove("selected");
      c2.classList.remove("selected");
      c1.classList.add("matched");
      c2.classList.add("matched");
      matchedCount += 2;

      message.textContent = `Matched: ${getPairName(c1.dataset.symbol, c2.dataset.symbol)}`;
      message.classList.add("pop");
      setTimeout(()=> message.classList.remove("pop"), 400);

      if(matchedCount === cardsArray.length){
        setTimeout(()=>{
          win.classList.add("show");
          finalSound.play().catch(()=>{});
        },500);
      }
    } else {
      setTimeout(()=>{
        c1.classList.remove("selected");
        c2.classList.remove("selected");
      },600);
    }
    selected = [];
  }
}

function isMatch(c1, c2){
  // Check if word ↔ emoji pair
  return (pairs[c1.dataset.symbol] === c2.dataset.symbol) ||
         (pairs[c2.dataset.symbol] === c1.dataset.symbol);
}

function getPairName(a, b){
  if(pairs[a] === b) return a;
  if(pairs[b] === a) return b;
  return "";
}
</script>

</body>
</html>
